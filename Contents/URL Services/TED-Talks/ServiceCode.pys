import re

####################################################################################################

TED_URL = 'http://www.ted.com'

####################################################################################################

def MetadataObjectForURL(url):
  content = HTTP.Request(url, cacheTime=7200, errors='ignore').content
  data = HTML.ElementFromString(content)

  title = data.xpath('//meta[@name="title"]')[0].get('content').split(' | ')[0]
  summary = data.xpath('//meta[@name="description"]')[0].get('content')
  
  filmDate = re.search('fd:"(.+?)",', content).group(1)
  postedDate = Datetime.ParseDate(re.search('pd:"(.+?)",', content).group(1)).date()
  event = re.search('en:"(.+?)",', content).group(1)

  thumbUrl = data.xpath('//link[@rel="image_src"]')[0].get('href')

  # Construct a metadata item
  vc = VideoClipObject(
    title = title,
    tagline = '%s : %s' % (event, filmDate),
    originally_available_at = postedDate,
    summary = summary,
    thumb = thumbUrl
  )
  return vc

####################################################################################################
def MediaObjectsForURL(url):

  return [(MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url))],
      protocols = [Protocol.HTTPMP4Video],
      platforms = [ClientPlatform.iOS, ClientPlatform.Android, ClientPlatform.MacOSX, ClientPlatform.LGTV],
      video_codec = VideoCodec.H264,
      video_resolution = '480p',
      audio_codec = AudioCodec.AAC,
        )
      )
    ]


####################################################################################################

def PlayVideo(url):
  video_url = None

  try:
    video_url = HTML.ElementFromURL(url, cacheTime=CACHE_1WEEK).xpath('//dl[@class="downloads"]//dt/a[contains(text(),"Watch")]')[0].get('href')
    video_url = TED_BASE + video_url
  except:
    try:
      youtube_url = HTML.ElementFromURL(url, cacheTime=CACHE_1WEEK).xpath('//embed[contains(@src, "youtube.com")]')[0].get('src')
      return Redirect(URLService.MediaObjectsForURL(youtube_url))
    except:
      try:
        youtube_url = HTML.ElementFromURL(url, cacheTime=CACHE_1WEEK).xpath('//a[contains(@href, "youtube.com")]')[0].get('href')
        return Redirect(URLService.MediaObjectsForURL(youtube_url))
      except:
        try:
          ted_streaming_el = HTML.ElementFromURL(url, cacheTime=CACHE_1WEEK).xpath("//div[@class='save clearfix']")[0]
          video_url = re.search('vu=(http://video.ted.com.*?flv)', HTML.StringFromElement(ted_streaming_el)).group(1)
        except:
          Log(HTTP.Request(url).content)
          pass

  return Redirect(video_url)